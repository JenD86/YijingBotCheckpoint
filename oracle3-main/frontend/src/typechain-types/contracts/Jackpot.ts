/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Jackpot {
  export type DistributionStruct = {
    receiver: AddressLike;
    percentage: BigNumberish;
  };

  export type DistributionStructOutput = [
    receiver: string,
    percentage: bigint
  ] & { receiver: string; percentage: bigint };
}

export interface JackpotInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "START_TIME"
      | "TOKEN"
      | "WINDOW_TIME"
      | "claim"
      | "gameSlots"
      | "games"
      | "getCurrentGameId"
      | "getSettings"
      | "getTicketId"
      | "initPool"
      | "isPending"
      | "nonces"
      | "operators"
      | "owner"
      | "purchase"
      | "renounceOwnership"
      | "setOperator"
      | "setPending"
      | "setWinningTicket"
      | "tickets"
      | "transferOwnership"
      | "updateSettings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claimed"
      | "OwnershipTransferred"
      | "Purchased"
      | "SetOperator"
      | "SettingsUpdated"
      | "WonTicket"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "START_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WINDOW_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "gameSlots",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getCurrentGameId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initPool",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isPending", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "operators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "purchase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setPending", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setWinningTicket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSettings",
    values: [BigNumberish, Jackpot.DistributionStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "START_TIME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WINDOW_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameSlots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPending", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPending", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWinningTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSettings",
    data: BytesLike
  ): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    winner: AddressLike,
    gameId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [winner: string, gameId: bigint, amount: bigint];
  export interface OutputObject {
    winner: string;
    gameId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    ticketId: BigNumberish,
    gameId: BigNumberish,
    slotNo: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    ticketId: bigint,
    gameId: bigint,
    slotNo: bigint
  ];
  export interface OutputObject {
    buyer: string;
    ticketId: bigint;
    gameId: bigint;
    slotNo: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOperatorEvent {
  export type InputTuple = [account: AddressLike, isOperator: boolean];
  export type OutputTuple = [account: string, isOperator: boolean];
  export interface OutputObject {
    account: string;
    isOperator: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettingsUpdatedEvent {
  export type InputTuple = [operator: AddressLike, price: BigNumberish];
  export type OutputTuple = [operator: string, price: bigint];
  export interface OutputObject {
    operator: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WonTicketEvent {
  export type InputTuple = [
    operator: AddressLike,
    gameId: BigNumberish,
    ticketId: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    gameId: bigint,
    ticketId: bigint
  ];
  export interface OutputObject {
    operator: string;
    gameId: bigint;
    ticketId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Jackpot extends BaseContract {
  connect(runner?: ContractRunner | null): Jackpot;
  waitForDeployment(): Promise<this>;

  interface: JackpotInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  START_TIME: TypedContractMethod<[], [bigint], "view">;

  TOKEN: TypedContractMethod<[], [string], "view">;

  WINDOW_TIME: TypedContractMethod<[], [bigint], "view">;

  claim: TypedContractMethod<[ticketId: BigNumberish], [void], "nonpayable">;

  gameSlots: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  games: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        totalReward: bigint;
        numOfTickets: bigint;
        wonTicketId: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  getCurrentGameId: TypedContractMethod<[], [bigint], "view">;

  getSettings: TypedContractMethod<
    [],
    [
      [bigint, Jackpot.DistributionStructOutput[]] & {
        price: bigint;
        info: Jackpot.DistributionStructOutput[];
      }
    ],
    "view"
  >;

  getTicketId: TypedContractMethod<
    [account: AddressLike, nonce: BigNumberish],
    [bigint],
    "view"
  >;

  initPool: TypedContractMethod<
    [funder: AddressLike, fundingAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  isPending: TypedContractMethod<[], [boolean], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  operators: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  purchase: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setOperator: TypedContractMethod<
    [account: AddressLike, isOperator: boolean],
    [void],
    "nonpayable"
  >;

  setPending: TypedContractMethod<[status: boolean], [void], "nonpayable">;

  setWinningTicket: TypedContractMethod<
    [gameId: BigNumberish, ticketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  tickets: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { gameId: bigint; owner: string }],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSettings: TypedContractMethod<
    [price: BigNumberish, info: Jackpot.DistributionStruct[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "START_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WINDOW_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[ticketId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gameSlots"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        totalReward: bigint;
        numOfTickets: bigint;
        wonTicketId: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentGameId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSettings"
  ): TypedContractMethod<
    [],
    [
      [bigint, Jackpot.DistributionStructOutput[]] & {
        price: bigint;
        info: Jackpot.DistributionStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTicketId"
  ): TypedContractMethod<
    [account: AddressLike, nonce: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initPool"
  ): TypedContractMethod<
    [funder: AddressLike, fundingAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPending"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "operators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchase"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<
    [account: AddressLike, isOperator: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPending"
  ): TypedContractMethod<[status: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWinningTicket"
  ): TypedContractMethod<
    [gameId: BigNumberish, ticketId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tickets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { gameId: bigint; owner: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSettings"
  ): TypedContractMethod<
    [price: BigNumberish, info: Jackpot.DistributionStruct[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Purchased"
  ): TypedContractEvent<
    PurchasedEvent.InputTuple,
    PurchasedEvent.OutputTuple,
    PurchasedEvent.OutputObject
  >;
  getEvent(
    key: "SetOperator"
  ): TypedContractEvent<
    SetOperatorEvent.InputTuple,
    SetOperatorEvent.OutputTuple,
    SetOperatorEvent.OutputObject
  >;
  getEvent(
    key: "SettingsUpdated"
  ): TypedContractEvent<
    SettingsUpdatedEvent.InputTuple,
    SettingsUpdatedEvent.OutputTuple,
    SettingsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "WonTicket"
  ): TypedContractEvent<
    WonTicketEvent.InputTuple,
    WonTicketEvent.OutputTuple,
    WonTicketEvent.OutputObject
  >;

  filters: {
    "Claimed(address,uint256,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Purchased(address,uint256,uint256,uint256)": TypedContractEvent<
      PurchasedEvent.InputTuple,
      PurchasedEvent.OutputTuple,
      PurchasedEvent.OutputObject
    >;
    Purchased: TypedContractEvent<
      PurchasedEvent.InputTuple,
      PurchasedEvent.OutputTuple,
      PurchasedEvent.OutputObject
    >;

    "SetOperator(address,bool)": TypedContractEvent<
      SetOperatorEvent.InputTuple,
      SetOperatorEvent.OutputTuple,
      SetOperatorEvent.OutputObject
    >;
    SetOperator: TypedContractEvent<
      SetOperatorEvent.InputTuple,
      SetOperatorEvent.OutputTuple,
      SetOperatorEvent.OutputObject
    >;

    "SettingsUpdated(address,uint256)": TypedContractEvent<
      SettingsUpdatedEvent.InputTuple,
      SettingsUpdatedEvent.OutputTuple,
      SettingsUpdatedEvent.OutputObject
    >;
    SettingsUpdated: TypedContractEvent<
      SettingsUpdatedEvent.InputTuple,
      SettingsUpdatedEvent.OutputTuple,
      SettingsUpdatedEvent.OutputObject
    >;

    "WonTicket(address,uint256,uint256)": TypedContractEvent<
      WonTicketEvent.InputTuple,
      WonTicketEvent.OutputTuple,
      WonTicketEvent.OutputObject
    >;
    WonTicket: TypedContractEvent<
      WonTicketEvent.InputTuple,
      WonTicketEvent.OutputTuple,
      WonTicketEvent.OutputObject
    >;
  };
}
