import type Anthropic from "@anthropic-ai/sdk";
import dedent from "dedent";
import { hexagrams } from "./data";

export function generateFortune() {
  const resultingText = [""];
  // * Configures options to pass for CLI

  const toss = () => {
    // * traditional calculations to generate i-ching from coin flips assign 'heads' the value of 3 and 'tails' the value of two.
    return Math.floor(Math.random() * 2) === 0 ? 3 : 2;
  };
  const generateLine = () => {
    // * Each line's value is the sum of the values generated by the toss of three coins
    return toss() + toss() + toss();
  };

  const logFormat = (type, label) => {
    const result = locateHexagram(type);
    const resultString = `${
      "\nHexagram " +
      result.number +
      ": " +
      result.symbol +
      " - " +
      result.name.en +
      " | " +
      result.name.zh
    } ${" (" + label + ")"}
    ${result.image}
    ${"Judgment: "}
    ${result.judgment}`;

    resultingText.push(resultString);
  };

  const generateHexagram = () => {
    // * Each hexagram is composed of 6 lines
    let hexagram = "";
    for (let i = 0; i < 6; i++) {
      hexagram += generateLine();
    }
    convertHexagrams(hexagram);
  };

  const convertHexagrams = (hexagram) => {
    // * Lines with a value of 6 or 9 are considered "changing" and as a result, a second hexagram is generated
    let changing = false;
    let primary = "";
    let relating = "";
    for (let i = 0; i < hexagram.length; i++) {
      if (hexagram[i] === "6") {
        changing = true;
        primary += 8;
        relating += 7;
      } else if (hexagram[i] === "9") {
        changing = true;
        primary += 7;
        relating += 8;
      } else {
        primary += hexagram[i];
        relating += hexagram[i];
      }
    }
    if (changing) {
      logFormat(primary, "Primary");
      logFormat(relating, "Relating");
    } else {
      logFormat(primary, "Primary");
    }
  };

  const locateHexagram = (hex) => {
    hex = Number(hex);
    const found = hexagrams.find((e) => {
      return e.pattern === hex;
    });
    return found;
  };
  const generatedHexagram = generateHexagram();

  resultingText.shift();

  return resultingText.reduce((acc, cur) => acc + cur);
}

export async function summarizeFortuneCot(
  claudeClient: Anthropic,
  hexagrams: string,
  question: string,  // Add this parameter
): Promise<string> {
  console.log('\n=== CLAUDE PROMPT (COT) ===');
  const prompt = dedent`
    You are a helpful assistant that summarizes I Ching fortunes.
    Here's the Seeker's question:
    "${question}"

    And here's the generated hexagram, its meaning, and its judgement, wrapped in XML tags:

    <Hexagrams>
    ${hexagrams}
    </Hexagrams>

    Please give a profound, in-dept analysis of how these hexagram's relate to the Seeker's question, telling the fortune of said Seeker.
    Use Chain of Thought prompting using the 'CoT' XML tags to explain your reasoning with list of reasonings.
    Put the summarization after the '</CoT>' tag. Start your fortune with the hexagrams symbols, names and numbers.
    Make sure your interpretation directly addresses the user's question.

    <CoT>
    - 
    `.trim();
  console.log(prompt);

  const response = await queryClaude(
    claudeClient,
    prompt
  );
  console.log('\n=== CLAUDE RESPONSE (COT) ===');
  console.log(response);
  const regex = /<\/CoT>\n([\s\S]*$)/s;
  const match = response.match(regex);

  if (!match) {
    throw new Error(
      `Claude Opus 3.5 generated something unparseable ${response}`,
    );
  }

  return match[1].trim();
}

export async function summarizeFortuneBasic(
claudeClient: Anthropic, fortune: string, question: string,
): Promise<string> {
  console.log('\n=== CLAUDE PROMPT (BASIC) ===');
  const prompt = dedent`
    You are a helpful assistant that summarizes I Ching fortunes.
    Here's the generated hexagram, its meaning, and its judgement:

    ${fortune}

    IMPORTANT: Use ONLY the hexagram information provided above. Do not make up your own hexagram.
    Please generate a one-sentence fortune based on the hexagram above.
    Begin your response by repeating the hexagram symbols, names and numbers exactly as shown above.
    `.trim();
  console.log(prompt);

  const response = await queryClaude(
    claudeClient,
    prompt
  );
  console.log('\n=== CLAUDE RESPONSE (BASIC) ===');
  console.log(response);

  return response;
}

export async function queryClaude(
  claudeClient: Anthropic,
  prompt: string,
): Promise<string> {
  try {
    const message = await claudeClient.messages.create({
      model: process.env.ANTHROPIC_MODEL,
      messages: [{ role: "user", content: prompt }],
      max_tokens: 1000,
    });

    return message.content[0]["text"] as string;
  } catch (error) {
    console.error("Error querying Claude:", error);
    throw error;
  }
}